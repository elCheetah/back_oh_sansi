generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Areas {
  id          Int     @id @default(autoincrement())
  codigo      String? @db.VarChar(50)
  nombre      String  @db.VarChar(100)
  descripcion String? @db.Text
  estado      Boolean @default(true)

  config_medallas ConfigMedallas[]
  participacion   Participacion[]

  @@map("areas")
}

model ConfigMedallas {
  id        Int @id @default(autoincrement())
  area_id   Int
  nivel_id  Int
  oros      Int @default(1)
  platas    Int @default(1)
  bronces   Int @default(1)
  menciones Int @default(0)

  area  Areas   @relation(fields: [area_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  nivel Niveles @relation(fields: [nivel_id], references: [id], onDelete: Cascade)

  @@index([area_id])
  @@index([nivel_id])
  @@map("config_medallas")
}

model Evaluaciones {
  id                  Int       @id @default(autoincrement())
  participacion_id    Int
  evaluador_id        Int?
  fase_id             Int?
  nota                Decimal
  comentario          String?   @db.Text
  creado_en           DateTime  @default(now())
  validado            Boolean?  @default(false)
  ultima_modificacion DateTime?

  participacion Participacion @relation(fields: [participacion_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  evaluador     Usuarios?     @relation(fields: [evaluador_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  fase          Fases?        @relation(fields: [fase_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@index([participacion_id])
  @@index([evaluador_id])
  @@index([fase_id])
  @@map("evaluaciones")
}

enum EstadoFase {
  PENDIENTE
  EN_EJECUCION
  EN_REVISION
  FINALIZADA
  CANCELADA
  ARCHIVADA
}

model Fases {
  id          Int        @id @default(autoincrement())
  nombre      String     @db.VarChar(100)
  descripcion String?    @db.Text
  inicio      DateTime?
  fin         DateTime?
  estado      EstadoFase @default(PENDIENTE)

  evaluaciones Evaluaciones[]

  @@map("fases")
}

model Logs {
  id             Int       @id @default(autoincrement())
  entidad        String    @db.VarChar(100)
  entidad_id     Int?
  campo          String?   @db.VarChar(100)
  valor_anterior String?   @db.Text
  valor_nuevo    String?   @db.Text
  usuario_id     Int
  fecha_cambio   DateTime? @default(now())
  motivo         String?   @db.Text

  usuario Usuarios? @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([usuario_id])
  @@map("logs")
}

enum RolEquipo {
  LIDER
  PARTICIPANTE
}

model MiembrosEquipo {
  id            Int       @id @default(autoincrement())
  olimpista_id  Int
  nombre_equipo String    @db.VarChar(100)
  rol_en_equipo RolEquipo

  olimpista Olimpistas @relation(fields: [olimpista_id], references: [id], onDelete: Cascade)

  @@index([olimpista_id])
  @@map("miembros_equipo")
}

model Niveles {
  id          Int     @id @default(autoincrement())
  codigo      String? @db.VarChar(50)
  nombre      String  @db.VarChar(100)
  descripcion String? @db.Text
  estado      Boolean @default(true)

  participacion  Participacion[]
  ConfigMedallas ConfigMedallas[]

  @@map("niveles")
}

enum TipoDocumento {
  CI
  PASAPORTE
  CARNET_EXTRANJERO
  CERTIFICADO_NACIMIENTO
}

enum Sexo {
  MASCULINO
  FEMENINO
  OTRO
}

model Olimpistas {
  id               Int           @id @default(autoincrement())
  nombre           String        @db.VarChar(100)
  ap_paterno       String        @db.VarChar(100)
  ap_materno       String?       @db.VarChar(100)
  tipo_documento   TipoDocumento
  numero_documento String        @db.VarChar(20)
  unidad_educativa String        @db.VarChar(150)
  departamento     String        @db.VarChar(100)
  grado            String?       @db.VarChar(50)
  fecha_nacimiento DateTime?
  sexo             Sexo?
  activo           Boolean       @default(true)
  creado_en        DateTime      @default(now())

  tutor_id        Int?
  tutor           Tutores?         @relation(fields: [tutor_id], references: [id], onDelete: SetNull)
  participacion   Participacion[]
  miembros_equipo MiembrosEquipo[]

  @@unique([tipo_documento, numero_documento])
  @@map("olimpistas")
}

enum EstadoParticipacion {
  CLASIFICADO
  NO_CLASIFICADO
  DESCALIFICADO
}

enum TipoParticipacion {
  INDIVIDUAL
  EQUIPO
}

model Participacion {
  id           Int                 @id @default(autoincrement())
  olimpista_id Int
  area_id      Int
  nivel_id     Int
  estado       EstadoParticipacion @default(NO_CLASIFICADO)
  tipo         TipoParticipacion

  olimpista    Olimpistas     @relation(fields: [olimpista_id], references: [id], onDelete: Cascade)
  area         Areas          @relation(fields: [area_id], references: [id], onDelete: Cascade)
  nivel        Niveles        @relation(fields: [nivel_id], references: [id], onDelete: Cascade)
  evaluaciones Evaluaciones[]

  @@index([olimpista_id])
  @@index([area_id])
  @@index([nivel_id])
  @@map("participacion")
}

model Reportes {
  id           Int       @id @default(autoincrement())
  tipo         String    @db.VarChar(100)
  parametros   Json?     @db.JsonB
  archivo      String?   @db.VarChar(255)
  generado_por Int
  generado_en  DateTime? @default(now())

  generadoPor Usuarios? @relation(fields: [generado_por], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([generado_por])
  @@map("reportes")
}

model Roles {
  id          Int     @id @default(autoincrement())
  nombre      String  @unique @db.VarChar(50)
  descripcion String? @db.Text

  usuario_rol UsuarioRol[]

  @@map("roles")
}

model Tutores {
  id               Int           @id @default(autoincrement())
  nombre           String        @db.VarChar(100)
  ap_paterno       String        @db.VarChar(100)
  ap_materno       String?       @db.VarChar(100)
  tipo_documento   TipoDocumento
  numero_documento String        @db.VarChar(20)
  telefono         String?       @db.VarChar(20)
  correo           String?       @db.VarChar(150)
  unidad_educativa String        @db.VarChar(150)
  profesion        String?       @db.VarChar(150)
  creado_en        DateTime      @default(now())

  olimpistas Olimpistas[]

  @@unique([tipo_documento, numero_documento])
  @@map("tutores")
}

model UsuarioRol {
  id         Int  @id @default(autoincrement())
  usuario_id Int?
  rol_id     Int?

  usuario Usuarios? @relation(fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  rol     Roles?    @relation(fields: [rol_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([usuario_id])
  @@index([rol_id])
  @@map("usuario_rol")
}

model Usuarios {
  id               Int           @id @default(autoincrement())
  contrasena_hash  String        @db.VarChar(255)
  nombre           String        @db.VarChar(100)
  ap_paterno       String        @db.VarChar(100)
  ap_materno       String?       @db.VarChar(100)
  tipo_documento   TipoDocumento
  numero_documento String        @db.VarChar(20)
  correo           String        @unique @db.VarChar(150)
  telefono         String?       @db.VarChar(20)
  cargo            String?       @db.VarChar(100)
  profesion        String?       @db.VarChar(100)
  institucion      String?       @db.VarChar(150)
  estado           Boolean       @default(true)
  creado_en        DateTime      @default(now())
  actualizado_en   DateTime?

  evaluaciones Evaluaciones[]
  logs         Logs[]
  reportes     Reportes[]
  usuario_rol  UsuarioRol[]

  @@map("usuarios")
}


//generator erd {
//  provider = "prisma-erd-generator"
//}
